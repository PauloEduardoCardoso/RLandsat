# Create Radimoetric and Topographic corrected files from Landsat 8 OLI
# Paulo E. Cardoso 29-01-2014

# Packages necessarios
#install.packages("raster", repos="http://R-Forge.R-project.org") 
kpacks <- c("raster", "sp", "rgdal",'stats', 'landsat')
new.packs <- kpacks[!(kpacks %in% installed.packages()[,"Package"])]
if(length(new.packs)) install.packages(new.packs)
lapply(kpacks, require, character.only=T)
remove(kpacks, new.packs)

# Folders --------------------------------------------------------------------------
## Adjust for local work paths
dir.work <- './Oli' # Alterar para Disco Local
dir.tif <- 'LC82040522014014LGN00' # TIF file folder
dir.rst   <- 'rst' # Destination folder
dir.shp <- './shp'

# Local parameters -----------------------------------------------------------------
## Projections
v.utm28n <- CRS("+init=epsg:32628") # UTM 28N Landsat Images
v.wgs84 <- CRS("+init=epsg:4326") # WGS84 Long Lat
## Study site frame extent ----------------------------------------------------------
### Create rectangular area for image cropping
### For Bissau
v.ae <-  extent(c(418875, 434025, 1200585, 1224015)) # PNMJVP UTM28N
ae <- readOGR(dsn = file.path(dir.shp), layer = 'BijagosUTM_Buf200m')
proj4string(ae) <- v.utm28n # Asign projection WGS84
## Build Mask Raster to keep study area only
### 1st: Read a single Band to get the desired extent based on satellite images
f.CreateMask <- function(x){
  x <- grep(".tif$", list.files(file.path(dir.work,dir.tif), all.files = F),
            ignore.case = TRUE, value = TRUE)[1] 
  band <- raster(file.path(dir.work, dir.tif, x),
                 package = "raster")
  dataType(band) # Must be INT2U for Landsat 8. Range of Values: 0 to 65534
  band.ae <- crop(band, v.ae) # Crop band to AE Extent
  dataType(band.ae) <- dataType(band)
  ## 2nd: Create the Mask raster to the croped band extent
  ae.r <- raster(extent(band.ae)) # Raster AE: resolucao 30m (Landast)
  res(ae.r) <- 30 # Define resolution
  ae.r[] <- 1 # Defalt value
  projection(ae.r) <- v.utm28n # Assign projection
  #dataType(ae.r) <- "INT1U"
  ## Overlay AE poly to AE Extent raster
  ## Mask will have 1 and NA values
  msk.ae <- mask(ae.r, ae) 
  #dataType(mask_ae) <- "INT1U" 
  ## Evaluate rasters
  stopifnot(compareRaster(mask.ae, band.ae)) 
  msk.ae
}
mask.ae <- f.CreateMask(x)
# Satelite parameters and data -----------------------------------------------------
## Landsat 8 Scene Metadata: MTL File -----------------------------------------------
### Metadata file contains scene acquisition details and correction parameters
mtl <- read.delim(file.path(dir.work, dir.tif,  
                            grep('_MTL.txt',
                                 list.files(file.path(dir.work, dir.tif), all.files = F),
                                 ignore.case = TRUE, value = TRUE)),
                  sep = '=', stringsAsFactors = F)

# Functions for Radiometric and Topographic calibration Landsat 8 ------------------
## Convert DN to Surface reflectances using simple DOS method.
### According to http://www.gisagmaps.com/landsat-8-atco-guide/, DOS may perform
### better under some circumnstances.
### More info at:
### http://landsat.usgs.gov/Landsat8_Using_Product.php
### http://landsat.usgs.gov/L8_band_combos.php : Band References
### ESUN and OLI: http://landsat.usgs.gov/ESUN.php
## DN to uncorrected TOA reflectance: planetary reflectance
f.ToarL8 <- function(x=x,  i = i){
  # uncorrected TOA reflectance
  i.lsat_ref <- (x * as.numeric(mtl[grep(paste0("REFLECTANCE_MULT_BAND_", i),
                                         mtl$GROUP), 2]) +
                   as.numeric(mtl[grep(paste0("REFLECTANCE_ADD_BAND_", i),
                                       mtl$GROUP), 2])) 
  # Correct for Sun Elevation sin(Theta_SE)
  i.tse <- as.numeric(mtl[grep("SUN_ELEVATION", mtl$GROUP), 2])*pi/180 # radians
  i.sune <- sin(i.tse)
  i.toa <- i.lsat_ref / i.sune  
  i.toa
}
### USER Topographic Correction function: Cosine, CCorrection and Minnaert
f.TopoCor <- function(x, method = 'minnaert') {
  METHODS <- c('none', 'cosine', 'ccorrection', 'minnaert')
  method <- pmatch(method, METHODS)
  if(method == 1){
    message('Message: No change will be made')
    xout <- x
  } else if(method == 2){
    # DEM slope and Aspect
    slope <- slopeasp.ae$slope
    aspect <- slopeasp.ae$aspect
    il.epsilon <- 1e-06
    # Sun elev in radians
    sun.e <- as.numeric(mtl[grep("SUN_ELEVATION", mtl$GROUP), 2]) * (pi/180) 
    # Sun Zenit in radians
    sun.z <- (90 - as.numeric(mtl[grep("SUN_ELEVATION", mtl$GROUP), 2])) * (pi/180)
    sun.a <- as.numeric(mtl[grep("SUN_AZIMUTH", mtl$GROUP), 2])* (pi/180)
    il.ae <- cos(slope) * cos(sun.z) + sin(slope) *
      sin(sun.z) * cos(sun.a - aspect)
    # stopifnot(min(getValues(il.ae), na.rm = T) >= 0)
    il.ae[il.ae == 0] <- il.epsilon
    xout <- x * (cos(sun.z)/il.ae)
  } else if (method == 3) {
    band.lm <- lm(as.vector(x) ~ as.vector(il.ae))
    C <- coefficients(band.lm)[[1]]/coefficients(band.lm)[[2]]
    xout <- x * (cos(sun.z) + C)/(il.ae + C)
  } else if(method == 4) {
    targetslope <- atan(0.05)
    if (all(x[slope >= targetslope] < 0, na.rm = TRUE)) {
      K <- 1
    } else {
      K <- data.frame(y = as.vector(x[slope >= targetslope]), 
                      x = as.vector(il.ae[slope >= targetslope])/cos(sun.z))
      K <- K[!apply(K, 1, function(x) any(is.na(x))), ]
      K <- K[K$x > 0, ]
      K <- K[K$y > 0, ]
      K <- lm(log10(K$y) ~ log10(K$x))
      K <- coefficients(K)[[2]]
      if (K > 1) 
        K <- 1
      if (K < 0) 
        K <- 0
    }
    xout <- x * (cos(sun.z)/il.ae)^K
  } else message('Message: Method not implemented')
  xout
}

# Function to create radiometric corrected Files -----------------------------------
# For original Landsat Product only
f.idrisidata <- function(x, write = T) {
  i.mtl <- read.delim(file.path(dir.work, dir.tif,
                                grep('_MTL.txt',
                                     list.files(file.path(dir.work, dir.tif)),
                                     ignore.case = TRUE, value = TRUE)),
                      sep = '=', stringsAsFactors = F)
  i.all.files <- list.files(file.path(dir.work,dir.tif), all.files = F)
  # List of TIF files at dir.tif folder
  i.list.tif <- grep(".tif$", i.all.files, ignore.case = TRUE, value = TRUE) 
  i.stk.toar <- stack()
  #i.stk.toart <- stack() # topocorr
  i.lstk <- list()
  for (i in 1:length(i.list.tif)){
    # Name
    i.fname <- substr(i.list.tif[i], 1, (nchar(i.list.tif[i]) - 4))
    i.names <- paste0('B', i)
    # Read Geotif raster
    i.img.tmp <- raster(file.path(dir.work, dir.tif, i.list.tif[i]),
                        package = "raster", varname = fname, dataType = 'INT2U')
    #projection(i.img.tmp) <- v.utm28n
    # Crop and apply mask   
    i.img.crop.m <- crop(i.img.tmp, v.ae, datatype = 'INT2U')
    # DN to uncorrected TOA Reflectance with Mask overlay
    i.toar <- f.ToarL8(x = i.img.crop.m, i = i)
    i.toarmsk <- i.toar * mask.ae
    #projection(i.toarmsk) <- v.utm28n
    i.toarmsk@data@names <- i.names
    # uncorrected TOA Reflectance with Topographic correction with mask overlay
    #i.toart <- f.TopoCor(i.toar, method = topocor)
    #i.toartmsk <- i.toart * mask_ae
    #i.toartmsk@data@names <- i.names
    # Write uncorrected TOA Reflectance file
    #gdal
    #writeGDAL(as(i.l8, "SpatialGridDataFrame"), fname = "D:\\idri.rst", drivername = "RST") 
    # Create Stack
    if(i < 8) {
      i.stk.toar <- addLayer(i.stk.toar, i.toarmsk)
      #i.stk.toart <- addLayer(i.stk.toart, i.toartmsk)
    }
    # Write IDRISI raster group rgf for uncorrected TOA Reflectance
    if(write == T) {
      writeRaster(i.toarmsk, filename = file.path(dir.work, dir.tif, dir.rst,
                                                  paste0(i.fname,'T', i)),
                  datatype = 'FLT4S', format = 'RST',
                  overwrite = TRUE, NAflag = -9999)
      fileConn <- file(file.path(dir.work, dir.tif, dir.rst, "ae_toar.rgf"))
      writeLines(c(length(i.list.tif), paste0(substr(i.list.tif, 1,
                                                     (nchar(i.list.tif[1]) - 4)), 'T')),
                 fileConn)
      close(fileConn)
    } else message (paste0('Message: no raster file will be created for band ', i))
    # Write IDRISI raster group rgf for TOA with COSINE Topographic correction
    #fileConn <- file(file.path(dir.work, dir.tif, dir.rst, "ae_toar_topo.rgf"))
    #writeLines(c(length(i.list.tif), substr(i.list.tif, 1,
    #                                        (nchar(i.list.tif[1]) - 4))), fileConn)
    #close(fileConn)
    #i.lstk[[1]] <- i.stk.toar
    #i.lstk[[2]] <- i.stk.toart
  }
  i.stk.toar
}

l8.files <- f.idrisidata(x, write = F)
